/**
 * Templates de embeds para mensagens do Discord
 */

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const config = require('../config');

// Embed para mensagem de boas-vindas
function welcomeEmbed(username) {
  return new EmbedBuilder()
    .setTitle('üè™ Bem-vindo ao Mercad√£o das Contas!')
    .setColor(config.discord.embedColors.primary)
    .setDescription(`Ol√° ${username}! Seja bem-vindo √† maior loja de contas Valorant do Discord.`)
    .addFields(
      { name: 'üõç Nossos Produtos', value: 'Temos as melhores contas Valorant com skins raras e ranks altos.' },
      { name: 'üí∞ Como Comprar', value: 'Digite `!produtos` para ver nosso cat√°logo e `!comprar <id>` para adquirir um produto.' },
      { name: '‚ùì Precisa de Ajuda?', value: 'Digite `!ajuda` para falar com nosso assistente virtual.' }
    )
    .setImage('https://i.imgur.com/XJuZbRg.png') // URL de imagem ilustrativa
    .setTimestamp();
}

// Embed para detalhes de produto
function productEmbed(product) {
  const embed = new EmbedBuilder()
    .setTitle(`üõç ${product.nome}`)
    .setColor(config.discord.embedColors.primary)
    .setDescription(product.descricao)
    .addFields(
      { name: 'Pre√ßo', value: `üí∞ R$ ${product.preco.toFixed(2)}`, inline: true },
      { name: 'Tipo', value: product.tipo, inline: true },
      { name: 'Disponibilidade', value: product.disponivel ? '‚úÖ Dispon√≠vel' : '‚ùå Indispon√≠vel', inline: true }
    );

  // Adicionar caracter√≠sticas espec√≠ficas do produto
  if (product.detalhes) {
    Object.entries(product.detalhes).forEach(([chave, valor]) => {
      embed.addFields({ name: chave, value: valor.toString(), inline: true });
    });
  }

  return embed;
}

// Embed para instru√ß√µes de pagamento PIX
function pixPaymentEmbed(payment, product) {
  return new EmbedBuilder()
    .setTitle('üí∞ Pagamento PIX')
    .setColor(config.discord.embedColors.primary)
    .setDescription(`**Instru√ß√µes para pagamento:**\n\nVoc√™ est√° comprando: **${product.nome}**`)
    .addFields(
      { name: 'Valor', value: `R$ ${product.preco.toFixed(2)}`, inline: true },
      { name: 'C√≥digo da compra', value: payment._id.toString().substring(0, 8), inline: true },
      { name: '‚ö† Importante', value: 'Ap√≥s o pagamento, um administrador ir√° verificar e aprovar sua compra manualmente. Os dados de acesso ser√£o enviados por mensagem privada.' },
      { name: 'üì≤ Como pagar', value: 'Escaneie o QR Code ao lado ou utilize o c√≥digo PIX abaixo para realizar o pagamento.' },
      { name: 'üìã C√≥digo PIX (Copia e Cola)', value: '```' + payment.pixCode + '```' }
    )
    .setImage(payment.qrCodeUrl) // URL da imagem do QR Code gerado
    .setFooter({ text: '‚ö† Pol√≠tica de N√£o-Estorno: Ao realizar o pagamento, voc√™ concorda que n√£o haver√° estorno sob nenhuma circunst√¢ncia.' })
    .setTimestamp();
}

// Embed para confirma√ß√£o de compra aprovada
function purchaseConfirmationEmbed(payment, product, accountDetails) {
  return new EmbedBuilder()
    .setTitle('‚úÖ Compra Aprovada!')
    .setColor(config.discord.embedColors.success)
    .setDescription(`Sua compra foi aprovada e processada com sucesso!`)
    .addFields(
      { name: 'Produto', value: product.nome, inline: true },
      { name: 'Valor pago', value: `R$ ${payment.amount.toFixed(2)}`, inline: true },
      { name: 'Data', value: `${new Date().toLocaleDateString()}`, inline: true },
      { name: 'üìã Dados de Acesso', value: '```' +
        `Login: ${accountDetails.login}\nSenha: ${accountDetails.password}` +
        '```' },
      { name: '‚ö† Importante', value: 'Recomendamos que voc√™ altere a senha imediatamente ap√≥s o primeiro acesso.' },
      { name: 'üîó Mini-Site', value: `[Clique aqui](https://seu-dominio.com/produto/${product._id}) para visualizar todos os detalhes da conta.` }
    )
    .setTimestamp();
}

// Embed para promo√ß√£o
function promotionEmbed(promotion) {
  const dataFim = new Date(promotion.dataFim);

  return new EmbedBuilder()
    .setTitle(`üî• ${promotion.titulo || 'PROMO√á√ÉO ESPECIAL'}`)
    .setColor('#FF5733')
    .setDescription(`**${promotion.descricao}**\n\nAproveite! Termina ${dataFim.toLocaleString()}`)
    .addFields(
      { name: 'Desconto', value: `${promotion.desconto}%`, inline: true },
      { name: 'Dura√ß√£o', value: `${promotion.duracao} horas`, inline: true }
    )
    .setImage(promotion.imageUrl || 'https://i.imgur.com/XJuZbRg.png')
    .setTimestamp();
}

// Embed para alerta de seguran√ßa
function securityAlertEmbed(alert) {
  return new EmbedBuilder()
    .setTitle('üö® Alerta de Seguran√ßa')
    .setColor(config.discord.embedColors.error)
    .setDescription(`**${alert.title}**`)
    .addFields(
      { name: 'Usu√°rio', value: alert.user || 'N/A', inline: true },
      { name: 'IP', value: alert.ip || 'N/A', inline: true },
      { name: 'Hor√°rio', value: `${new Date(alert.timestamp).toLocaleString()}`, inline: true },
      { name: 'Tipo', value: alert.type, inline: true },
      { name: 'Detalhes', value: alert.details || 'Sem detalhes adicionais.' }
    )
    .setTimestamp();
}

// Embed para assistente virtual
function assistantEmbed(question, answer, suggestions = []) {
  const embed = new EmbedBuilder()
    .setTitle('ü§ñ Assistente Virtual')
    .setColor(config.discord.embedColors.primary)
    .setDescription(`**Sua pergunta:** ${question}\n\n**Resposta:** ${answer}`)
    .setTimestamp();

  // Adicionar sugest√µes relacionadas se houver
  if (suggestions && suggestions.length > 0) {
    embed.addFields({ name: 'Perguntas relacionadas', value: suggestions.join('\n') });
  }

  return embed;
}

// Bot√µes padr√£o para compra
function createBuyButtons(productId) {
  return new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId(`buy_${productId}`)
        .setLabel('Comprar Agora')
        .setStyle(ButtonStyle.Success),

      new ButtonBuilder()
        .setCustomId(`view_details_${productId}`)
        .setLabel('Ver Detalhes')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId(`minisite_${productId}`)
        .setLabel('Ver no Mini-Site')
        .setStyle(ButtonStyle.Link)
        .setURL(`https://seu-dominio.com/produto/${productId}`)
    );
}

// Exportar todos os templates
module.exports = {
  welcomeEmbed,
  productEmbed,
  pixPaymentEmbed,
  purchaseConfirmationEmbed,
  promotionEmbed,
  securityAlertEmbed,
  assistantEmbed,
  createBuyButtons
};
